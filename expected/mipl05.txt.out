TOKEN: T_PROG	    LEXEME: program
N_PROG -> N_PROGLBL T_IDENT T_SCOLON N_BLOCK T_DOT
N_PROGLBL -> T_PROG
TOKEN: T_IDENT	    LEXEME: DiddleDeDum
TOKEN: T_SCOLON	    LEXEME: ;
TOKEN: T_VAR	    LEXEME: var
N_BLOCK -> N_VARDECPART N_PROCDECPART N_STMTPART
N_VARDECPART -> T_VAR N_VARDEC T_SCOLON N_VARDECLST
TOKEN: T_IDENT	    LEXEME: stuff
N_VARDEC -> N_IDENT N_IDENTLST T_COLON N_TYPE
N_IDENT -> T_IDENT
TOKEN: T_COLON	    LEXEME: :
N_IDENTLST -> epsilon
TOKEN: T_ARRAY	    LEXEME: array
N_TYPE -> N_ARRAY
N_ARRAY -> T_ARRAY T_LBRACK N_IDXRANGE T_RBRACK T_OF N_SIMPLE
TOKEN: T_LBRACK	    LEXEME: [
TOKEN: T_INTCONST	    LEXEME: 1
N_IDXRANGE -> N_IDX T_DOTDOT N_IDX
N_IDX -> T_INTCONST
TOKEN: T_DOTDOT	    LEXEME: ..
TOKEN: T_INTCONST	    LEXEME: 20
N_IDX -> T_INTCONST
TOKEN: T_RBRACK	    LEXEME: ]
TOKEN: T_OF	    LEXEME: of
TOKEN: T_INT	    LEXEME: integer
N_SIMPLE -> T_INT
TOKEN: T_SCOLON	    LEXEME: ;
TOKEN: T_IDENT	    LEXEME: data
N_VARDECLST -> N_VARDEC T_SCOLON N_VARDECLST
N_VARDEC -> N_IDENT N_IDENTLST T_COLON N_TYPE
N_IDENT -> T_IDENT
TOKEN: T_COMMA	    LEXEME: ,
N_IDENTLST -> T_COMMA N_IDENT N_IDENTLST
TOKEN: T_IDENT	    LEXEME: max
N_IDENT -> T_IDENT
TOKEN: T_COLON	    LEXEME: :
N_IDENTLST -> epsilon
TOKEN: T_INT	    LEXEME: integer
N_TYPE -> N_SIMPLE
N_SIMPLE -> T_INT
TOKEN: T_SCOLON	    LEXEME: ;
TOKEN: T_IDENT	    LEXEME: i
N_VARDECLST -> N_VARDEC T_SCOLON N_VARDECLST
N_VARDEC -> N_IDENT N_IDENTLST T_COLON N_TYPE
N_IDENT -> T_IDENT
TOKEN: T_COMMA	    LEXEME: ,
N_IDENTLST -> T_COMMA N_IDENT N_IDENTLST
TOKEN: T_IDENT	    LEXEME: loc
N_IDENT -> T_IDENT
TOKEN: T_COLON	    LEXEME: :
N_IDENTLST -> epsilon
TOKEN: T_INT	    LEXEME: integer
N_TYPE -> N_SIMPLE
N_SIMPLE -> T_INT
TOKEN: T_SCOLON	    LEXEME: ;
TOKEN: T_PROC	    LEXEME: procedure
N_VARDECLST -> epsilon
N_PROCDECPART -> N_PROCDEC T_SCOLON N_PROCDECPART
N_PROCDEC -> N_PROCHDR N_BLOCK
N_PROCHDR -> T_PROC T_IDENT T_SCOLON
TOKEN: T_IDENT	    LEXEME: sort
TOKEN: T_SCOLON	    LEXEME: ;
TOKEN: T_VAR	    LEXEME: var
N_BLOCK -> N_VARDECPART N_PROCDECPART N_STMTPART
N_VARDECPART -> T_VAR N_VARDEC T_SCOLON N_VARDECLST
TOKEN: T_IDENT	    LEXEME: i
N_VARDEC -> N_IDENT N_IDENTLST T_COLON N_TYPE
N_IDENT -> T_IDENT
TOKEN: T_COMMA	    LEXEME: ,
N_IDENTLST -> T_COMMA N_IDENT N_IDENTLST
TOKEN: T_IDENT	    LEXEME: n
N_IDENT -> T_IDENT
TOKEN: T_COLON	    LEXEME: :
N_IDENTLST -> epsilon
TOKEN: T_INT	    LEXEME: integer
N_TYPE -> N_SIMPLE
N_SIMPLE -> T_INT
TOKEN: T_SCOLON	    LEXEME: ;
TOKEN: T_IDENT	    LEXEME: flag
N_VARDECLST -> N_VARDEC T_SCOLON N_VARDECLST
N_VARDEC -> N_IDENT N_IDENTLST T_COLON N_TYPE
N_IDENT -> T_IDENT
TOKEN: T_COLON	    LEXEME: :
N_IDENTLST -> epsilon
TOKEN: T_BOOL	    LEXEME: boolean
N_TYPE -> N_SIMPLE
N_SIMPLE -> T_BOOL
TOKEN: T_SCOLON	    LEXEME: ;
TOKEN: T_PROC	    LEXEME: procedure
N_VARDECLST -> epsilon
N_PROCDECPART -> N_PROCDEC T_SCOLON N_PROCDECPART
N_PROCDEC -> N_PROCHDR N_BLOCK
N_PROCHDR -> T_PROC T_IDENT T_SCOLON
TOKEN: T_IDENT	    LEXEME: swap
TOKEN: T_SCOLON	    LEXEME: ;
TOKEN: T_VAR	    LEXEME: var
N_BLOCK -> N_VARDECPART N_PROCDECPART N_STMTPART
N_VARDECPART -> T_VAR N_VARDEC T_SCOLON N_VARDECLST
TOKEN: T_IDENT	    LEXEME: n
N_VARDEC -> N_IDENT N_IDENTLST T_COLON N_TYPE
N_IDENT -> T_IDENT
TOKEN: T_COLON	    LEXEME: :
N_IDENTLST -> epsilon
TOKEN: T_INT	    LEXEME: integer
N_TYPE -> N_SIMPLE
N_SIMPLE -> T_INT
TOKEN: T_SCOLON	    LEXEME: ;
TOKEN: T_BEGIN	    LEXEME: begin
N_VARDECLST -> epsilon
N_PROCDECPART -> epsilon
N_STMTPART -> N_COMPOUND
N_COMPOUND -> T_BEGIN N_STMT N_STMTLST T_END
TOKEN: T_IDENT	    LEXEME: n
N_STMT -> N_ASSIGN
N_ASSIGN -> N_VARIABLE T_ASSIGN N_EXPR
N_VARIABLE -> T_IDENT N_IDXVAR
TOKEN: T_ASSIGN	    LEXEME: :=
N_IDXVAR -> epsilon
TOKEN: T_IDENT	    LEXEME: stuff
N_EXPR -> N_SIMPLEEXPR N_OPEXPR
N_SIMPLEEXPR -> N_TERM N_ADDOPLST
N_TERM -> N_FACTOR N_MULTOPLST
N_FACTOR -> N_SIGN N_VARIABLE
N_SIGN -> epsilon
N_VARIABLE -> T_IDENT N_IDXVAR
TOKEN: T_LBRACK	    LEXEME: [
N_IDXVAR -> T_LBRACK N_EXPR T_RBRACK
TOKEN: T_IDENT	    LEXEME: i
N_EXPR -> N_SIMPLEEXPR N_OPEXPR
N_SIMPLEEXPR -> N_TERM N_ADDOPLST
N_TERM -> N_FACTOR N_MULTOPLST
N_FACTOR -> N_SIGN N_VARIABLE
N_SIGN -> epsilon
N_VARIABLE -> T_IDENT N_IDXVAR
TOKEN: T_RBRACK	    LEXEME: ]
N_IDXVAR -> epsilon
N_MULTOPLST -> epsilon
N_ADDOPLST -> epsilon
N_OPEXPR -> epsilon
TOKEN: T_SCOLON	    LEXEME: ;
N_MULTOPLST -> epsilon
N_ADDOPLST -> epsilon
N_OPEXPR -> epsilon
N_STMTLST -> T_SCOLON N_STMT N_STMTLST
TOKEN: T_IDENT	    LEXEME: stuff
N_STMT -> N_ASSIGN
N_ASSIGN -> N_VARIABLE T_ASSIGN N_EXPR
N_VARIABLE -> T_IDENT N_IDXVAR
TOKEN: T_LBRACK	    LEXEME: [
N_IDXVAR -> T_LBRACK N_EXPR T_RBRACK
TOKEN: T_IDENT	    LEXEME: i
N_EXPR -> N_SIMPLEEXPR N_OPEXPR
N_SIMPLEEXPR -> N_TERM N_ADDOPLST
N_TERM -> N_FACTOR N_MULTOPLST
N_FACTOR -> N_SIGN N_VARIABLE
N_SIGN -> epsilon
N_VARIABLE -> T_IDENT N_IDXVAR
TOKEN: T_RBRACK	    LEXEME: ]
N_IDXVAR -> epsilon
N_MULTOPLST -> epsilon
N_ADDOPLST -> epsilon
N_OPEXPR -> epsilon
TOKEN: T_ASSIGN	    LEXEME: :=
TOKEN: T_IDENT	    LEXEME: stuff
N_EXPR -> N_SIMPLEEXPR N_OPEXPR
N_SIMPLEEXPR -> N_TERM N_ADDOPLST
N_TERM -> N_FACTOR N_MULTOPLST
N_FACTOR -> N_SIGN N_VARIABLE
N_SIGN -> epsilon
N_VARIABLE -> T_IDENT N_IDXVAR
TOKEN: T_LBRACK	    LEXEME: [
N_IDXVAR -> T_LBRACK N_EXPR T_RBRACK
TOKEN: T_IDENT	    LEXEME: i
N_EXPR -> N_SIMPLEEXPR N_OPEXPR
N_SIMPLEEXPR -> N_TERM N_ADDOPLST
N_TERM -> N_FACTOR N_MULTOPLST
N_FACTOR -> N_SIGN N_VARIABLE
N_SIGN -> epsilon
N_VARIABLE -> T_IDENT N_IDXVAR
TOKEN: T_PLUS	    LEXEME: +
N_IDXVAR -> epsilon
N_MULTOPLST -> epsilon
N_ADDOPLST -> N_ADDOP N_TERM N_ADDOPLST
N_ADDOP -> T_PLUS
TOKEN: T_INTCONST	    LEXEME: 1
N_TERM -> N_FACTOR N_MULTOPLST
N_FACTOR -> N_CONST
N_CONST -> T_INTCONST
TOKEN: T_RBRACK	    LEXEME: ]
N_MULTOPLST -> epsilon
N_ADDOPLST -> epsilon
N_OPEXPR -> epsilon
TOKEN: T_SCOLON	    LEXEME: ;
N_MULTOPLST -> epsilon
N_ADDOPLST -> epsilon
N_OPEXPR -> epsilon
N_STMTLST -> T_SCOLON N_STMT N_STMTLST
TOKEN: T_IDENT	    LEXEME: stuff
N_STMT -> N_ASSIGN
N_ASSIGN -> N_VARIABLE T_ASSIGN N_EXPR
N_VARIABLE -> T_IDENT N_IDXVAR
TOKEN: T_LBRACK	    LEXEME: [
N_IDXVAR -> T_LBRACK N_EXPR T_RBRACK
TOKEN: T_IDENT	    LEXEME: i
N_EXPR -> N_SIMPLEEXPR N_OPEXPR
N_SIMPLEEXPR -> N_TERM N_ADDOPLST
N_TERM -> N_FACTOR N_MULTOPLST
N_FACTOR -> N_SIGN N_VARIABLE
N_SIGN -> epsilon
N_VARIABLE -> T_IDENT N_IDXVAR
TOKEN: T_PLUS	    LEXEME: +
N_IDXVAR -> epsilon
N_MULTOPLST -> epsilon
N_ADDOPLST -> N_ADDOP N_TERM N_ADDOPLST
N_ADDOP -> T_PLUS
TOKEN: T_INTCONST	    LEXEME: 1
N_TERM -> N_FACTOR N_MULTOPLST
N_FACTOR -> N_CONST
N_CONST -> T_INTCONST
TOKEN: T_RBRACK	    LEXEME: ]
N_MULTOPLST -> epsilon
N_ADDOPLST -> epsilon
N_OPEXPR -> epsilon
TOKEN: T_ASSIGN	    LEXEME: :=
TOKEN: T_IDENT	    LEXEME: n
N_EXPR -> N_SIMPLEEXPR N_OPEXPR
N_SIMPLEEXPR -> N_TERM N_ADDOPLST
N_TERM -> N_FACTOR N_MULTOPLST
N_FACTOR -> N_SIGN N_VARIABLE
N_SIGN -> epsilon
N_VARIABLE -> T_IDENT N_IDXVAR
TOKEN: T_SCOLON	    LEXEME: ;
N_IDXVAR -> epsilon
N_MULTOPLST -> epsilon
N_ADDOPLST -> epsilon
N_OPEXPR -> epsilon
N_STMTLST -> T_SCOLON N_STMT N_STMTLST
TOKEN: T_IDENT	    LEXEME: flag
N_STMT -> N_ASSIGN
N_ASSIGN -> N_VARIABLE T_ASSIGN N_EXPR
N_VARIABLE -> T_IDENT N_IDXVAR
TOKEN: T_ASSIGN	    LEXEME: :=
N_IDXVAR -> epsilon
TOKEN: T_TRUE	    LEXEME: true
N_EXPR -> N_SIMPLEEXPR N_OPEXPR
N_SIMPLEEXPR -> N_TERM N_ADDOPLST
N_TERM -> N_FACTOR N_MULTOPLST
N_FACTOR -> N_CONST
N_CONST -> N_BOOLCONST
N_BOOLCONST -> T_TRUE
TOKEN: T_END	    LEXEME: end
N_MULTOPLST -> epsilon
N_ADDOPLST -> epsilon
N_OPEXPR -> epsilon
N_STMTLST -> epsilon
TOKEN: T_SCOLON	    LEXEME: ;
TOKEN: T_BEGIN	    LEXEME: begin
N_PROCDECPART -> epsilon
N_STMTPART -> N_COMPOUND
N_COMPOUND -> T_BEGIN N_STMT N_STMTLST T_END
TOKEN: T_IDENT	    LEXEME: flag
N_STMT -> N_ASSIGN
N_ASSIGN -> N_VARIABLE T_ASSIGN N_EXPR
N_VARIABLE -> T_IDENT N_IDXVAR
TOKEN: T_EQ	    LEXEME: =
N_IDXVAR -> epsilon
Line 25: syntax error
