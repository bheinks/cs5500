TOKEN: T_PROG      LEXEME: program
TOKEN: T_IDENT     LEXEME: DiddleDeDum
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_VAR       LEXEME: var
TOKEN: T_IDENT     LEXEME: stuff
TOKEN: T_COLON     LEXEME: :
TOKEN: T_ARRAY     LEXEME: array
TOKEN: T_LBRACK    LEXEME: [
TOKEN: T_INTCONST  LEXEME: 1
TOKEN: T_DOTDOT    LEXEME: ..
TOKEN: T_INTCONST  LEXEME: 20
TOKEN: T_RBRACK    LEXEME: ]
TOKEN: T_OF        LEXEME: of
TOKEN: T_INT       LEXEME: integer
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_IDENT     LEXEME: data
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_IDENT     LEXEME: max
TOKEN: T_COLON     LEXEME: :
TOKEN: T_INT       LEXEME: integer
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_IDENT     LEXEME: i
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_IDENT     LEXEME: loc
TOKEN: T_COLON     LEXEME: :
TOKEN: T_INT       LEXEME: integer
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_PROC      LEXEME: procedure
TOKEN: T_IDENT     LEXEME: sort
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_VAR       LEXEME: var
TOKEN: T_IDENT     LEXEME: i
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_IDENT     LEXEME: n
TOKEN: T_COLON     LEXEME: :
TOKEN: T_INT       LEXEME: integer
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_IDENT     LEXEME: flag
TOKEN: T_COLON     LEXEME: :
TOKEN: T_BOOL      LEXEME: boolean
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_PROC      LEXEME: procedure
TOKEN: T_IDENT     LEXEME: swap
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_VAR       LEXEME: var
TOKEN: T_IDENT     LEXEME: n
TOKEN: T_COLON     LEXEME: :
TOKEN: T_INT       LEXEME: integer
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_BEGIN     LEXEME: begin
TOKEN: T_IDENT     LEXEME: n
TOKEN: T_ASSIGN    LEXEME: :=
TOKEN: T_IDENT     LEXEME: stuff
TOKEN: T_LBRACK    LEXEME: [
TOKEN: T_IDENT     LEXEME: i
TOKEN: T_RBRACK    LEXEME: ]
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_IDENT     LEXEME: stuff
TOKEN: T_LBRACK    LEXEME: [
TOKEN: T_IDENT     LEXEME: i
TOKEN: T_RBRACK    LEXEME: ]
TOKEN: T_ASSIGN    LEXEME: :=
TOKEN: T_IDENT     LEXEME: stuff
TOKEN: T_LBRACK    LEXEME: [
TOKEN: T_IDENT     LEXEME: i
TOKEN: T_PLUS      LEXEME: +
TOKEN: T_INTCONST  LEXEME: 1
TOKEN: T_RBRACK    LEXEME: ]
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_IDENT     LEXEME: stuff
TOKEN: T_LBRACK    LEXEME: [
TOKEN: T_IDENT     LEXEME: i
TOKEN: T_PLUS      LEXEME: +
TOKEN: T_INTCONST  LEXEME: 1
TOKEN: T_RBRACK    LEXEME: ]
TOKEN: T_ASSIGN    LEXEME: :=
TOKEN: T_IDENT     LEXEME: n
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_IDENT     LEXEME: flag
TOKEN: T_ASSIGN    LEXEME: :=
TOKEN: T_TRUE      LEXEME: true
TOKEN: T_END       LEXEME: end
TOKEN: T_BEGIN     LEXEME: begin
TOKEN: T_IDENT     LEXEME: flag
TOKEN: T_ASSIGN    LEXEME: :=
TOKEN: T_TRUE      LEXEME: true
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_IDENT     LEXEME: n
TOKEN: T_ASSIGN    LEXEME: :=
TOKEN: T_IDENT     LEXEME: max
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_WHILE     LEXEME: while
TOKEN: T_LPAREN    LEXEME: (
TOKEN: T_IDENT     LEXEME: n
TOKEN: T_GT        LEXEME: >
TOKEN: T_INTCONST  LEXEME: 1
TOKEN: T_RPAREN    LEXEME: )
TOKEN: T_AND       LEXEME: and
TOKEN: T_IDENT     LEXEME: flag
TOKEN: T_DO        LEXEME: do
TOKEN: T_BEGIN     LEXEME: begin
TOKEN: T_IDENT     LEXEME: flag
TOKEN: T_ASSIGN    LEXEME: :=
TOKEN: T_FALSE     LEXEME: false
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_IDENT     LEXEME: i
TOKEN: T_ASSIGN    LEXEME: :=
TOKEN: T_INTCONST  LEXEME: 1
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_WHILE     LEXEME: while
TOKEN: T_IDENT     LEXEME: i
TOKEN: T_LT        LEXEME: <
TOKEN: T_IDENT     LEXEME: n
TOKEN: T_DO        LEXEME: do
TOKEN: T_BEGIN     LEXEME: begin
TOKEN: T_IF        LEXEME: if
TOKEN: T_IDENT     LEXEME: stuff
TOKEN: T_LBRACK    LEXEME: [
TOKEN: T_IDENT     LEXEME: i
TOKEN: T_RBRACK    LEXEME: ]
TOKEN: T_GT        LEXEME: >
TOKEN: T_IDENT     LEXEME: stuff
TOKEN: T_LBRACK    LEXEME: [
TOKEN: T_IDENT     LEXEME: i
TOKEN: T_PLUS      LEXEME: +
TOKEN: T_INTCONST  LEXEME: 1
TOKEN: T_RBRACK    LEXEME: ]
TOKEN: T_THEN      LEXEME: then
TOKEN: T_IDENT     LEXEME: swap
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_IDENT     LEXEME: i
TOKEN: T_ASSIGN    LEXEME: :=
TOKEN: T_IDENT     LEXEME: i
TOKEN: T_PLUS      LEXEME: +
TOKEN: T_INTCONST  LEXEME: 1
TOKEN: T_END       LEXEME: end
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_END       LEXEME: end
TOKEN: T_END       LEXEME: end
TOKEN: T_PROC      LEXEME: procedure
TOKEN: T_IDENT     LEXEME: find
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_VAR       LEXEME: var
TOKEN: T_IDENT     LEXEME: i
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_IDENT     LEXEME: j
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_IDENT     LEXEME: k
TOKEN: T_COLON     LEXEME: :
TOKEN: T_INT       LEXEME: integer
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_IDENT     LEXEME: found
TOKEN: T_COLON     LEXEME: :
TOKEN: T_BOOL      LEXEME: boolean
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_BEGIN     LEXEME: begin
TOKEN: T_IDENT     LEXEME: i
TOKEN: T_ASSIGN    LEXEME: :=
TOKEN: T_INTCONST  LEXEME: 1
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_IDENT     LEXEME: j
TOKEN: T_ASSIGN    LEXEME: :=
TOKEN: T_IDENT     LEXEME: max
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_IDENT     LEXEME: found
TOKEN: T_ASSIGN    LEXEME: :=
TOKEN: T_FALSE     LEXEME: false
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_WHILE     LEXEME: while
TOKEN: T_LPAREN    LEXEME: (
TOKEN: T_IDENT     LEXEME: i
TOKEN: T_LE        LEXEME: <=
TOKEN: T_IDENT     LEXEME: j
TOKEN: T_RPAREN    LEXEME: )
TOKEN: T_AND       LEXEME: and
TOKEN: T_NOT       LEXEME: not
TOKEN: T_IDENT     LEXEME: found
TOKEN: T_DO        LEXEME: do
TOKEN: T_BEGIN     LEXEME: begin
TOKEN: T_IDENT     LEXEME: k
TOKEN: T_ASSIGN    LEXEME: :=
TOKEN: T_LPAREN    LEXEME: (
TOKEN: T_IDENT     LEXEME: i
TOKEN: T_PLUS      LEXEME: +
TOKEN: T_IDENT     LEXEME: j
TOKEN: T_RPAREN    LEXEME: )
TOKEN: T_DIV       LEXEME: div
TOKEN: T_INTCONST  LEXEME: 2
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_IF        LEXEME: if
TOKEN: T_IDENT     LEXEME: stuff
TOKEN: T_LBRACK    LEXEME: [
TOKEN: T_IDENT     LEXEME: k
TOKEN: T_RBRACK    LEXEME: ]
TOKEN: T_GT        LEXEME: >
TOKEN: T_IDENT     LEXEME: data
TOKEN: T_THEN      LEXEME: then
TOKEN: T_IDENT     LEXEME: j
TOKEN: T_ASSIGN    LEXEME: :=
TOKEN: T_IDENT     LEXEME: k
TOKEN: T_MINUS     LEXEME: -
TOKEN: T_INTCONST  LEXEME: 1
TOKEN: T_ELSE      LEXEME: else
TOKEN: T_IF        LEXEME: if
TOKEN: T_IDENT     LEXEME: stuff
TOKEN: T_LBRACK    LEXEME: [
TOKEN: T_IDENT     LEXEME: k
TOKEN: T_RBRACK    LEXEME: ]
TOKEN: T_LT        LEXEME: <
TOKEN: T_IDENT     LEXEME: data
TOKEN: T_THEN      LEXEME: then
TOKEN: T_IDENT     LEXEME: i
TOKEN: T_ASSIGN    LEXEME: :=
TOKEN: T_IDENT     LEXEME: k
TOKEN: T_PLUS      LEXEME: +
TOKEN: T_INTCONST  LEXEME: 1
TOKEN: T_ELSE      LEXEME: else
TOKEN: T_IDENT     LEXEME: found
TOKEN: T_ASSIGN    LEXEME: :=
TOKEN: T_TRUE      LEXEME: true
TOKEN: T_END       LEXEME: end
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_IF        LEXEME: if
TOKEN: T_IDENT     LEXEME: found
TOKEN: T_THEN      LEXEME: then
TOKEN: T_IDENT     LEXEME: loc
TOKEN: T_ASSIGN    LEXEME: :=
TOKEN: T_IDENT     LEXEME: k
TOKEN: T_ELSE      LEXEME: else
TOKEN: T_IDENT     LEXEME: loc
TOKEN: T_ASSIGN    LEXEME: :=
TOKEN: T_INTCONST  LEXEME: 0
TOKEN: T_END       LEXEME: end
TOKEN: T_BEGIN     LEXEME: begin
TOKEN: T_IDENT     LEXEME: max
TOKEN: T_ASSIGN    LEXEME: :=
TOKEN: T_INTCONST  LEXEME: 0
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_READ      LEXEME: read
TOKEN: T_LPAREN    LEXEME: (
TOKEN: T_IDENT     LEXEME: data
TOKEN: T_RPAREN    LEXEME: )
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_WHILE     LEXEME: while
TOKEN: T_IDENT     LEXEME: data
TOKEN: T_GE        LEXEME: >=
TOKEN: T_INTCONST  LEXEME: 0
TOKEN: T_DO        LEXEME: do
TOKEN: T_BEGIN     LEXEME: begin
TOKEN: T_IDENT     LEXEME: max
TOKEN: T_ASSIGN    LEXEME: :=
TOKEN: T_IDENT     LEXEME: max
TOKEN: T_PLUS      LEXEME: +
TOKEN: T_INTCONST  LEXEME: 1
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_IDENT     LEXEME: stuff
TOKEN: T_LBRACK    LEXEME: [
TOKEN: T_IDENT     LEXEME: max
TOKEN: T_RBRACK    LEXEME: ]
TOKEN: T_ASSIGN    LEXEME: :=
TOKEN: T_IDENT     LEXEME: data
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_READ      LEXEME: read
TOKEN: T_LPAREN    LEXEME: (
TOKEN: T_IDENT     LEXEME: data
TOKEN: T_RPAREN    LEXEME: )
TOKEN: T_END       LEXEME: end
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_IDENT     LEXEME: sort
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_WRITE     LEXEME: write
TOKEN: T_LPAREN    LEXEME: (
TOKEN: T_CHARCONST LEXEME: '('
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: ' '
TOKEN: T_RPAREN    LEXEME: )
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_IDENT     LEXEME: i
TOKEN: T_ASSIGN    LEXEME: :=
TOKEN: T_INTCONST  LEXEME: 1
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_WHILE     LEXEME: while
TOKEN: T_IDENT     LEXEME: i
TOKEN: T_LE        LEXEME: <=
TOKEN: T_IDENT     LEXEME: max
TOKEN: T_DO        LEXEME: do
TOKEN: T_BEGIN     LEXEME: begin
TOKEN: T_WRITE     LEXEME: write
TOKEN: T_LPAREN    LEXEME: (
TOKEN: T_IDENT     LEXEME: stuff
TOKEN: T_LBRACK    LEXEME: [
TOKEN: T_IDENT     LEXEME: i
TOKEN: T_RBRACK    LEXEME: ]
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: ' '
TOKEN: T_RPAREN    LEXEME: )
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_IDENT     LEXEME: i
TOKEN: T_ASSIGN    LEXEME: :=
TOKEN: T_IDENT     LEXEME: i
TOKEN: T_PLUS      LEXEME: +
TOKEN: T_INTCONST  LEXEME: 1
TOKEN: T_END       LEXEME: end
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_WRITE     LEXEME: write
TOKEN: T_LPAREN    LEXEME: (
TOKEN: T_CHARCONST LEXEME: ')'
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: '\'
TOKEN: T_RPAREN    LEXEME: )
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_READ      LEXEME: read
TOKEN: T_LPAREN    LEXEME: (
TOKEN: T_IDENT     LEXEME: data
TOKEN: T_RPAREN    LEXEME: )
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_WHILE     LEXEME: while
TOKEN: T_IDENT     LEXEME: data
TOKEN: T_GE        LEXEME: >=
TOKEN: T_INTCONST  LEXEME: 0
TOKEN: T_DO        LEXEME: do
TOKEN: T_BEGIN     LEXEME: begin
TOKEN: T_IDENT     LEXEME: find
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_IF        LEXEME: if
TOKEN: T_IDENT     LEXEME: loc
TOKEN: T_EQ        LEXEME: =
TOKEN: T_INTCONST  LEXEME: 0
TOKEN: T_THEN      LEXEME: then
TOKEN: T_WRITE     LEXEME: write
TOKEN: T_LPAREN    LEXEME: (
TOKEN: T_CHARCONST LEXEME: 'N'
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: 'o'
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: ' '
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: 'm'
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: 'a'
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: 't'
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: 'c'
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: 'h'
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: ' '
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: 'f'
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: 'o'
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: 'r'
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: ' '
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_IDENT     LEXEME: data
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: '\'
TOKEN: T_RPAREN    LEXEME: )
TOKEN: T_ELSE      LEXEME: else
TOKEN: T_WRITE     LEXEME: write
TOKEN: T_LPAREN    LEXEME: (
TOKEN: T_CHARCONST LEXEME: 'S'
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: 't'
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: 'u'
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: 'f'
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: 'f'
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: '['
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_IDENT     LEXEME: loc
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: ']'
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: ' '
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: '='
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: ' '
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_IDENT     LEXEME: data
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: '\'
TOKEN: T_RPAREN    LEXEME: )
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_READ      LEXEME: read
TOKEN: T_LPAREN    LEXEME: (
TOKEN: T_IDENT     LEXEME: data
TOKEN: T_RPAREN    LEXEME: )
TOKEN: T_END       LEXEME: end
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_WRITE     LEXEME: write
TOKEN: T_LPAREN    LEXEME: (
TOKEN: T_CHARCONST LEXEME: 'e'
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: 'n'
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: 'd'
TOKEN: T_COMMA     LEXEME: ,
TOKEN: T_CHARCONST LEXEME: '\'
TOKEN: T_RPAREN    LEXEME: )
TOKEN: T_SCOLON    LEXEME: ;
TOKEN: T_END       LEXEME: end
TOKEN: T_DOT       LEXEME: .
